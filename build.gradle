plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.57'
//    id 'org.spongepowered.mixin'
}

//Calendar calendar = Calendar.getInstance()
//String year = String.valueOf(calendar.getWeekYear()).replace("20", "")
//+ year + 'd' + calendar.get(Calendar.DAY_OF_YEAR) + 'a'
version = '1.20.2-3.0.15'
group = mod_group_id

repositories {
    mavenLocal()
}

// http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesName = mod_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // Applies to all run configurations below.
    configureEach {
//        systemProperty 'mixin.env.disableRefMap', 'true'
//        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
//        workingDirectory project.file('run')

        // Recommended logging data for a user development environment.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console.
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
//        systemProperty "mixin.debug.export", "true"

        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // Example of overriding the "workingDirectory" set in "configureEach" above, uncomment if you want to use it.
        // workingDirectory project.file('run-data')

        // Specify the mod id for data generation, where to output the resulting resources, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

//mixin {
//    add sourceSets.main, "variants.mixins.refmap.json"
//}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

//    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    // Compile against the Just Enough Items API but do not include it at runtime.
//    compileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    // At runtime, use the full Just Enough Items jar.
//    runtimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"

    // Patchouli
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Annotation Processors
//    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    // You may put jars on which you depend on in ./libs or you may define them like so:
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples:
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev' // Adds Buildcraft to the development environment
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // Adds EJML (Efficient Java Matrix Library) to the development environment

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings:
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more information, see:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

repositories {
    maven {
        // Location of the maven that hosts Just Enough Items files since January 2023.
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // Location of a maven mirror for Just Enough Items files, as a fallback.
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
//    maven {
 //          Patchouli
//        url 'https://maven.blamejared.com'
//    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version: neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// However if you are in a multi-project build, development time needs unobfuscated jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            url = 'https://repo.spongepowered.org/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

Calendar calendar = Calendar.getInstance()
String year = String.valueOf(calendar.getWeekYear()).replace("20", "")
version = '1.16.5-v1.6.15-' + year + 'd' + calendar.get(Calendar.DAY_OF_YEAR) + 'a'

// http://maven.apache.org/guides/mini/guide-naming-conventions.html
group = 'com.junethewoods.variants'
archivesBaseName = 'Variants'

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' Java Virtual Machine (JVM): ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format:
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#                            Stables are built at the discretion of the MCP team.

    // Use non-default mappings at your own risk, they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // An Srg-named sources jar is made by default. Uncomment this to disable.
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            workingDirectory project.file('run')
            property "mixin.debug.export", "true"

            // Recommended logging data for a user development environment.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console.
            property 'forge.logging.console.level', 'debug'

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console.
            property 'forge.logging.console.level', 'debug'

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }

        data {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console.
            property 'forge.logging.console.level', 'debug'

            // Specify the mod id for data generation, where to output the resulting resources, and where to look for existing resources.
            args '--mod', 'variants', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "variants.mixins.refmap.json"
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // Specify the Minecraft version to use.
    // If this is any group other than 'net.minecraft', it is assumed that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The user development artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.39'

    // Compile against the Just Enough Items API but do not include it at runtime.
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    // At runtime, use the full Just Enough Items jar.
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    // Patchouli
//    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Annotation Processors
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'

    // You may put jars on which you depend on in ./libs or you may define them like so:
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples:
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev' // Adds Buildcraft to the development environment
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // Adds EJML (Efficient Java Matrix Library) to the development environment

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings:
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more information, see:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

repositories {
    maven {
        // Just Enough Items
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
//    maven {
 //          Patchouli
//        url 'https://maven.blamejared.com'
//    }
}

// Example for how to get properties into the manifest for reading by the runtime:
jar {
    manifest {
        attributes([
            "Specification-Title": "Variants",
            "Specification-Vendor": "JuneTheWoods",
            // We are version one of ourselves.
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "JuneTheWoods",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "variants.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task.
// This is the preferred method to reobfuscate your jar file.
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, development time needs unobfuscated jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
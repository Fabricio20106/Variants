buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'idea'

version = '1.18.2-2.0.5.1-' + new Date().format("dd-MM-yyyy")
// http://maven.apache.org/guides/mini/guide-naming-conventions.html
group = 'com.junethewoods.variants'
archivesBaseName = 'Variants'

// Mojang ships Java 17 to end-users on 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#                            Stables are built at the discretion of the MCP team.

    // Use non-default mappings at your own risk, they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'

    // An Srg-named sources jar is made by default. Uncomment this to disable.
    // makeObfSourceJar = false

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console.
            property 'forge.logging.console.level', 'debug'

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console.
            property 'forge.logging.console.level', 'debug'

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            // The markers can be added or removed as needed, separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console.
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load game tests from.
            // Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'variants'

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a user development environment.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console.
            property 'forge.logging.console.level', 'debug'

            // Specify the variants for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'variants', '--all', '--existing', file('src/main/resources').toString(), '--existing', file('src/generated/resources').toString(), '--output', file('src/generated/resources/')

            mods {
                variants {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // Specify the Minecraft version to use.
    // If this is any group other than 'net.minecraft', it is assumed that the 'dep' is a Forge Gradle 'patcher' dependency, and its patches will be applied.
    // The user development artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.73'

    // Compile against the Just Enough Items API but do not include it at runtime.
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    // At runtime, use the full Just Enough Items jar.
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    // You may put jars on which you depend on in ./libs or you may define them like so:
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples:
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev' // Adds Buildcraft to the development environment.
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // Adds EJML (Efficient Java Matrix Library) to the development environment.

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings:
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more information, see:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

repositories {
    maven {
        // Just Enough Items
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        // Location of the maven that hosts Just Enough Items' files.
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Location of a maven mirror for Just Enough Items' files, as a fallback.
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

// Example for how to get properties into the manifest for reading by the runtime.
jar {
    manifest {
        attributes([
            "Specification-Title": "Variants",
            "Specification-Vendor": "JuneTheWoods",
            // We are version one of ourselves.
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"JuneTheWoods",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task.
// This is the preferred method to re-obfuscate your jar file.
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, development time needs unobfuscated jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
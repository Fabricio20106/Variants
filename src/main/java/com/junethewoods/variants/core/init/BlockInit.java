package com.junethewoods.variants.core.init;

import com.junethewoods.variants.common.block.*;
import com.junethewoods.variants.common.block.tree.PaintingTree;
import com.junethewoods.variants.core.Variants;
import com.junethewoods.variants.core.gen.VariantFeatures;
import com.junethewoods.variants.core.sound.VariantSoundTypes;
import net.minecraft.block.*;
import net.minecraft.block.material.Material;
import net.minecraft.block.material.MaterialColor;
import net.minecraft.potion.Effects;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockReader;
import net.minecraftforge.fml.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;

public class BlockInit {
    public static final DeferredRegister<Block> blocks = DeferredRegister.create(ForgeRegistries.BLOCKS, Variants.mod_id);

    public static final RegistryObject<Block> potted_sugar_cane = blocks.register("potted_sugar_cane", () -> new FlowerPotBlock(() -> null, () -> Blocks.SUGAR_CANE, AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> golden_carrots = blocks.register("golden_carrots", () -> new GoldenCarrotsBlock(AbstractBlock.Properties.create(Material.PLANTS).tickRandomly().zeroHardnessAndResistance().sound(SoundType.CROP)));
    public static final RegistryObject<Block> potted_golden_carrots = blocks.register("potted_golden_carrots", () -> new FlowerPotBlock(() -> null, () -> BlockInit.golden_carrots.get(), AbstractBlock.Properties.from(Blocks.POTTED_ALLIUM)));
    public static final RegistryObject<Block> gold_cauldron = blocks.register("gold_cauldron", () -> new WaterloggableCauldronBlock(AbstractBlock.Properties.from(Blocks.GOLD_BLOCK)));
    public static final RegistryObject<Block> gold_beacon = blocks.register("gold_beacon", () -> new BeaconBlock(AbstractBlock.Properties.from(Blocks.BEACON)));
    public static final RegistryObject<Block> quartz_cauldron = blocks.register("quartz_cauldron", () -> new WaterloggableCauldronBlock(AbstractBlock.Properties.from(Blocks.QUARTZ_BLOCK)));
    public static final RegistryObject<Block> quartz_beacon = blocks.register("quartz_beacon", () -> new BeaconBlock(AbstractBlock.Properties.from(Blocks.BEACON)));
    public static final RegistryObject<Block> quartz_ore = blocks.register("quartz_ore", () -> new VariantOreBlock(AbstractBlock.Properties.create(Material.ROCK, MaterialColor.STONE).setRequiresTool().hardnessAndResistance(3.0F, 9.0F)));
    public static final RegistryObject<Block> end_quartz_ore = blocks.register("end_quartz_ore", () -> new VariantOreBlock(AbstractBlock.Properties.create(Material.ROCK, MaterialColor.SAND).setRequiresTool().hardnessAndResistance(3.0F, 3.0F)));
    public static final RegistryObject<Block> raw_debris_block = blocks.register("raw_debris_block", () -> new Block(AbstractBlock.Properties.create(Material.IRON, MaterialColor.BLACK).setRequiresTool().hardnessAndResistance(30.0F, 1200.0F).sound(SoundType.ANCIENT_DEBRIS)));
    public static final RegistryObject<Block> glow_black_tulip = blocks.register("glow_black_tulip", () -> new FlowerBlock(Effects.STRENGTH, 7, AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.CROP)));
    public static final RegistryObject<Block> warped_wart = blocks.register("warped_wart", () -> new WarpedWartBlock(AbstractBlock.Properties.create(Material.PLANTS, MaterialColor.WARPED_WART).doesNotBlockMovement().tickRandomly().sound(SoundType.FUNGUS)));
    public static final RegistryObject<Block> potted_warped_wart = blocks.register("potted_warped_wart", () -> new FlowerPotBlock(() -> null, () -> warped_wart.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> potted_glow_black_tulip = blocks.register("potted_glow_black_tulip", () -> new FlowerPotBlock(() -> null, () -> glow_black_tulip.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> sunny_flower = blocks.register("sunny_flower", () -> new FlowerBlock(Effects.GLOWING, 7, AbstractBlock.Properties.create(Material.PLANTS).doesNotBlockMovement().zeroHardnessAndResistance().sound(SoundType.CROP)));
    public static final RegistryObject<Block> potted_sunny_flower = blocks.register("potted_sunny_flower", () -> new FlowerPotBlock(() -> null, () -> sunny_flower.get(), AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> glow_berry_bush = blocks.register("glow_berry_bush", () -> new SweetBerryBushBlock(AbstractBlock.Properties.from(Blocks.SWEET_BERRY_BUSH)));
    public static final RegistryObject<Block> painting_sapling = blocks.register("painting_sapling", () -> new SaplingBlock(new PaintingTree(), AbstractBlock.Properties.from(Blocks.OAK_SAPLING)));
    public static final RegistryObject<Block> painting_log = blocks.register("painting_log", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> painting_wood = blocks.register("painting_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> stripped_painting_log = blocks.register("stripped_painting_log", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> stripped_painting_wood = blocks.register("stripped_painting_wood", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> painting_leaves = blocks.register("painting_leaves", () -> new LeavesBlock(Block.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> painting_planks = blocks.register("painting_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.OAK_PLANKS)));
    public static final RegistryObject<Block> painting_slab = blocks.register("painting_slab", () -> new SlabBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> painting_stairs = blocks.register("painting_stairs", () -> new StairsBlock(() -> painting_planks.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.OAK_STAIRS)));
    public static final RegistryObject<Block> painting_fence = blocks.register("painting_fence", () -> new FenceBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> painting_fence_gate = blocks.register("painting_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> painting_pressure_plate = blocks.register("painting_pressure_plate", () -> new PressurePlateBlock(PressurePlateBlock.Sensitivity.EVERYTHING, AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> painting_button = blocks.register("painting_button", () -> new WoodButtonBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> painting_trapdoor = blocks.register("painting_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> painting_door = blocks.register("painting_door", () -> new DoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> ender_wart_block = blocks.register("ender_wart_block", () -> new Block(AbstractBlock.Properties.from(Blocks.WARPED_WART_BLOCK)));
    public static final RegistryObject<Block> ender_bookshelf = blocks.register("ender_bookshelf", () -> new Block(AbstractBlock.Properties.from(Blocks.BOOKSHELF)));
    public static final RegistryObject<Block> ender_planks = blocks.register("ender_planks", () -> new Block(AbstractBlock.Properties.from(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> ender_stem = blocks.register("ender_stem", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.WARPED_STEM)));
    public static final RegistryObject<Block> stripped_ender_stem = blocks.register("stripped_ender_stem", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.STRIPPED_WARPED_STEM)));
    public static final RegistryObject<Block> ender_hyphae = blocks.register("ender_hyphae", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.WARPED_HYPHAE)));
    public static final RegistryObject<Block> stripped_ender_hyphae = blocks.register("stripped_ender_hyphae", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.STRIPPED_WARPED_HYPHAE)));
    public static final RegistryObject<Block> ender_nylium = blocks.register("ender_nylium", () -> new EnderNyliumBlock(AbstractBlock.Properties.from(Blocks.WARPED_NYLIUM)));
    public static final RegistryObject<Block> ender_stairs = blocks.register("ender_stairs", () -> new StairsBlock(() -> ender_planks.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.WARPED_STAIRS)));
    public static final RegistryObject<Block> ender_slab = blocks.register("ender_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.WARPED_SLAB)));
    public static final RegistryObject<Block> ender_fence = blocks.register("ender_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.WARPED_FENCE)));
    public static final RegistryObject<Block> ender_fence_gate = blocks.register("ender_fence_gate", () -> new FenceGateBlock(AbstractBlock.Properties.from(Blocks.WARPED_FENCE_GATE)));
    public static final RegistryObject<Block> ender_trapdoor = blocks.register("ender_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(Blocks.WARPED_TRAPDOOR)));
    public static final RegistryObject<Block> ender_door = blocks.register("ender_door", () -> new DoorBlock(AbstractBlock.Properties.from(Blocks.WARPED_DOOR)));
    public static final RegistryObject<Block> ender_fungus = blocks.register("ender_fungus", () -> new EnderFungusBlock(AbstractBlock.Properties.from(Blocks.WARPED_FUNGUS), () -> VariantFeatures.ender_fungi_planted));
    public static final RegistryObject<Block> ender_roots = blocks.register("ender_roots", () -> new EnderRootsBlock(AbstractBlock.Properties.from(Blocks.CRIMSON_ROOTS)));
    public static final RegistryObject<Block> ender_sprouts = blocks.register("ender_sprouts", () -> new EnderSproutsBlock(AbstractBlock.Properties.from(Blocks.NETHER_SPROUTS)));
    public static final RegistryObject<Block> warping_vines_plant = blocks.register("warping_vines_plant", () -> new WarpingVinesBlock(AbstractBlock.Properties.from(Blocks.WEEPING_VINES_PLANT)));
    public static final RegistryObject<Block> warping_vines = blocks.register("warping_vines", () -> new WarpingVinesTopBlock(AbstractBlock.Properties.from(Blocks.WEEPING_VINES)));
    public static final RegistryObject<Block> potted_ender_roots = blocks.register("potted_ender_roots", () -> new FlowerPotBlock(() -> null, () -> ender_roots.get(), AbstractBlock.Properties.from(Blocks.POTTED_CRIMSON_ROOTS)));
    public static final RegistryObject<Block> potted_ender_fungus = blocks.register("potted_ender_fungus", () -> new FlowerPotBlock(() -> null, () -> ender_fungus.get(), AbstractBlock.Properties.from(Blocks.POTTED_CRIMSON_FUNGUS)));
    public static final RegistryObject<Block> wanderer_door = blocks.register("wanderer_door", () -> new DoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> graham_door = blocks.register("graham_door", () -> new DoorBlock(AbstractBlock.Properties.from(wanderer_door.get())));
    public static final RegistryObject<Block> glow_black_wool = blocks.register("glow_black_wool", () -> new Block(AbstractBlock.Properties.from(Blocks.WHITE_WOOL)));
    public static final RegistryObject<Block> glow_black_carpet = blocks.register("glow_black_carpet", () -> new VariantCarpetBlock(VariantDyeColor.glow_black, AbstractBlock.Properties.from(Blocks.WHITE_CARPET)));
    public static final RegistryObject<Block> diamond_bell = blocks.register("diamond_bell", () -> new BellBlock(AbstractBlock.Properties.create(Material.IRON, MaterialColor.DIAMOND).setRequiresTool().hardnessAndResistance(5.0F, 6.0F).sound(SoundType.ANVIL)));
    public static final RegistryObject<Block> potted_torch = blocks.register("potted_torch", () -> new FlowerPotBlock(null, () -> Blocks.TORCH, AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid().setLightLevel((state) -> 15)));
    public static final RegistryObject<Block> potted_soul_torch = blocks.register("potted_soul_torch", () -> new FlowerPotBlock(() -> null, () -> Blocks.SOUL_TORCH, AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid().setLightLevel((state) -> 10)));
    public static final RegistryObject<Block> elder_prismarine = blocks.register("elder_prismarine", () -> new Block(AbstractBlock.Properties.from(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> elder_prismarine_stairs = blocks.register("elder_prismarine_stairs", () -> new StairsBlock(() -> elder_prismarine.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> elder_prismarine_slab = blocks.register("elder_prismarine_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> elder_prismarine_wall = blocks.register("elder_prismarine_wall", () -> new WallBlock(AbstractBlock.Properties.from(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> elder_prismarine_bricks = blocks.register("elder_prismarine_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.PRISMARINE_BRICKS)));
    public static final RegistryObject<Block> elder_prismarine_brick_stairs = blocks.register("elder_prismarine_brick_stairs", () -> new StairsBlock(() -> elder_prismarine_bricks.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.PRISMARINE_BRICKS)));
    public static final RegistryObject<Block> elder_prismarine_brick_slab = blocks.register("elder_prismarine_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.PRISMARINE_BRICKS)));
    public static final RegistryObject<Block> dark_elder_prismarine = blocks.register("dark_elder_prismarine", () -> new Block(AbstractBlock.Properties.from(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> dark_elder_prismarine_stairs = blocks.register("dark_elder_prismarine_stairs", () -> new StairsBlock(() -> dark_elder_prismarine.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> dark_elder_prismarine_slab = blocks.register("dark_elder_prismarine_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> elder_sea_lantern = blocks.register("elder_sea_lantern", () -> new Block(AbstractBlock.Properties.from(Blocks.SEA_LANTERN)));
    public static final RegistryObject<Block> azure_bluet_leaves = blocks.register("azure_bluet_leaves", () -> new LeavesBlock(AbstractBlock.Properties.from(Blocks.OAK_LEAVES)));
    public static final RegistryObject<Block> alban_trapdoor = blocks.register("alban_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> aztec_trapdoor = blocks.register("aztec_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> aztec2_trapdoor = blocks.register("aztec2_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> bomb_trapdoor = blocks.register("bomb_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> kebab_trapdoor = blocks.register("kebab_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> plant_trapdoor = blocks.register("plant_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> wasteland_trapdoor = blocks.register("wasteland_trapdoor", () -> new TrapDoorBlock(AbstractBlock.Properties.from(painting_planks.get())));
    public static final RegistryObject<Block> wither_bone_block = blocks.register("wither_bone_block", () -> new WitherBoneBlock(AbstractBlock.Properties.from(Blocks.BONE_BLOCK)));
    public static final RegistryObject<Block> potted_grass = blocks.register("potted_grass", () -> new FlowerPotBlock(() -> null, () -> Blocks.GRASS, AbstractBlock.Properties.create(Material.MISCELLANEOUS).zeroHardnessAndResistance().notSolid()));
    public static final RegistryObject<Block> chiseled_end_stone_bricks = blocks.register("chiseled_end_stone_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.END_STONE_BRICKS)));
    public static final RegistryObject<Block> chiseled_purpur_block = blocks.register("chiseled_purpur_block", () -> new Block(AbstractBlock.Properties.from(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> end_stone_pillar = blocks.register("end_stone_pillar", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.END_STONE_BRICKS)));
    public static final RegistryObject<Block> mossy_end_stone_bricks = blocks.register("mossy_end_stone_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.END_STONE_BRICKS)));
    public static final RegistryObject<Block> mossy_nether_bricks = blocks.register("mossy_nether_bricks", () -> new Block(AbstractBlock.Properties.from(Blocks.NETHER_BRICKS)));
    public static final RegistryObject<Block> mossy_purpur_block = blocks.register("mossy_purpur_block", () -> new Block(AbstractBlock.Properties.from(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> mossy_end_stone_brick_stairs = blocks.register("mossy_end_stone_brick_stairs", () -> new StairsBlock(() -> mossy_end_stone_bricks.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.END_STONE_BRICKS)));
    public static final RegistryObject<Block> mossy_nether_brick_stairs = blocks.register("mossy_nether_brick_stairs", () -> new StairsBlock(() -> mossy_nether_bricks.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.NETHER_BRICKS)));
    public static final RegistryObject<Block> mossy_purpur_stairs = blocks.register("mossy_purpur_stairs", () -> new StairsBlock(() -> mossy_purpur_block.get().getDefaultState(), AbstractBlock.Properties.from(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> mossy_end_stone_brick_slab = blocks.register("mossy_end_stone_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.END_STONE_BRICKS)));
    public static final RegistryObject<Block> mossy_nether_brick_slab = blocks.register("mossy_nether_brick_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.NETHER_BRICKS)));
    public static final RegistryObject<Block> mossy_purpur_slab = blocks.register("mossy_purpur_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> nether_brick_pillar = blocks.register("nether_brick_pillar", () -> new RotatedPillarBlock(AbstractBlock.Properties.from(Blocks.NETHER_BRICKS)));
    public static final RegistryObject<Block> smooth_purpur = blocks.register("smooth_purpur", () -> new Block(AbstractBlock.Properties.from(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> smooth_purpur_slab = blocks.register("smooth_purpur_slab", () -> new SlabBlock(AbstractBlock.Properties.from(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> red_nether_brick_fence = blocks.register("red_nether_brick_fence", () -> new FenceBlock(AbstractBlock.Properties.from(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> quartz_ladder = blocks.register("quartz_ladder", () -> new LadderBlock(AbstractBlock.Properties.from(Blocks.QUARTZ_BLOCK).sound(VariantSoundTypes.quartz_ladder)));
    public static final RegistryObject<Block> quartz_glass = blocks.register("quartz_glass", () -> new GlassBlock(AbstractBlock.Properties.from(Blocks.GLASS)));
    public static final RegistryObject<Block> quartz_glass_pane = blocks.register("quartz_glass_pane", () -> new PaneBlock(AbstractBlock.Properties.from(Blocks.GLASS_PANE)));
    public static final RegistryObject<Block> quartz_chain = blocks.register("quartz_chain", () -> new ChainBlock(AbstractBlock.Properties.from(Blocks.CHAIN)));
    public static final RegistryObject<Block> quartz_bars = blocks.register("quartz_bars", () -> new PaneBlock(AbstractBlock.Properties.from(Blocks.IRON_BARS)));
    public static final RegistryObject<Block> emerald_chain = blocks.register("emerald_chain", () -> new ChainBlock(AbstractBlock.Properties.from(Blocks.CHAIN)));
    public static final RegistryObject<Block> diamond_chain = blocks.register("diamond_chain", () -> new ChainBlock(AbstractBlock.Properties.from(Blocks.CHAIN)));
    public static final RegistryObject<Block> netherrack_lever = blocks.register("netherrack_lever", () -> new LeverBlock(AbstractBlock.Properties.from(Blocks.LEVER)));
    public static final RegistryObject<Block> end_stone_lever = blocks.register("end_stone_lever", () -> new LeverBlock(AbstractBlock.Properties.from(Blocks.LEVER)));
    public static final RegistryObject<Block> soul_brewing_stand = blocks.register("soul_brewing_stand", () -> new BrewingStandBlock(AbstractBlock.Properties.from(Blocks.BREWING_STAND)));

    public static final RegistryObject<Block> crimson_farmland = blocks.register("crimson_farmland", () -> new NetherFarmlandBlock(AbstractBlock.Properties.create(Material.ROCK, MaterialColor.CRIMSON_NYLIUM).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.NYLIUM).setBlocksVision(BlockInit::needsPostProcessing).setSuffocates(BlockInit::needsPostProcessing)));
    public static final RegistryObject<Block> warped_farmland = blocks.register("warped_farmland", () -> new NetherFarmlandBlock(AbstractBlock.Properties.create(Material.ROCK, MaterialColor.WARPED_NYLIUM).tickRandomly().hardnessAndResistance(0.6F).sound(SoundType.NYLIUM).setBlocksVision(BlockInit::needsPostProcessing).setSuffocates(BlockInit::needsPostProcessing)));;
    public static final RegistryObject<Block> ender_farmland = blocks.register("warped_farmland", () -> new EndFarmlandBlock(AbstractBlock.Properties.create(Material.ROCK, MaterialColor.SAND).tickRandomly().hardnessAndResistance(3.0F, 9.0F).setBlocksVision(BlockInit::needsPostProcessing).setSuffocates(BlockInit::needsPostProcessing)));;;

    private static boolean needsPostProcessing(BlockState state, IBlockReader reader, BlockPos pos) {
        return true;
    }
}
